{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\angel\\\\Downloads\\\\fe3-final-main (1)\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nconst ContextGlobal = /*#__PURE__*/createContext();\n\nconst ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [dentist, setDentist] = useState([]);\n  const url = 'https://jsonplaceholder.typicode.com/users';\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => setDentist(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      dentist,\n      setDentist\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"tDpE/idQfzsQKlmCaMXAhjqYar4=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\nexport const useGlobalStates = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useGlobalStates, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useParams","initialState","theme","data","ContextGlobal","ContextProvider","children","dentist","setDentist","url","fetch","then","res","json","useGlobalStates"],"sources":["C:/Users/angel/Downloads/fe3-final-main (1)/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport const initialState = {theme: \"\", data: []}\n\nconst ContextGlobal = createContext();\n\nconst ContextProvider = ({ children }) => {\n  \n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [dentist, setDentist] = useState([])\n\n  const url = 'https://jsonplaceholder.typicode.com/users'\n\n   useEffect(()=>{\n   fetch(url)\n       .then(res => res.json())\n       .then(data => setDentist(data))\n  },[])\n\n  return (\n    <ContextGlobal.Provider value={{dentist, setDentist}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n\nexport default ContextProvider\nexport const useGlobalStates = () => useContext(ContextGlobal)"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AAEP,MAAMC,aAAa,gBAAGR,aAAa,EAAnC;;AAEA,MAAMS,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAExC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;EAEA,MAAMU,GAAG,GAAG,4CAAZ;EAECX,SAAS,CAAC,MAAI;IACdY,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUR,IAAI,IAAIK,UAAU,CAACL,IAAD,CAF5B;EAGA,CAJS,EAIR,EAJQ,CAAT;EAMD,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACI,OAAD;MAAUC;IAAV,CAA/B;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAlBD;;GAAMD,e;;KAAAA,e;AAoBN,eAAeA,eAAf;AACA,OAAO,MAAMS,eAAe,GAAG;EAAA;;EAAA,OAAMjB,UAAU,CAACO,aAAD,CAAhB;AAAA,CAAxB;;IAAMU,e"},"metadata":{},"sourceType":"module"}